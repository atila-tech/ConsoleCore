// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoUnip.Repository;

namespace ProjetoUnip.Repository.Migrations
{
    [DbContext(typeof(ProjetoUnipContext))]
    [Migration("20201118213344_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("ProjetoUnip.Domain.Address.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<string>("Estado");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Numero");

                    b.Property<long>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Funcionario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CargoId");

                    b.Property<long?>("PessoaId");

                    b.Property<decimal>("Salario");

                    b.Property<bool>("Terceirizado");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Medico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Crm");

                    b.Property<long>("EspecialidadeId");

                    b.Property<long?>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Paciente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NumeroConvenio");

                    b.Property<long?>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Genero");

                    b.Property<string>("Nome");

                    b.Property<string>("Rg");

                    b.Property<long>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Util.Cargo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Util.Especialidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.User.Perfil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Perfis");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.User.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<long>("PerfilId");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Util.Consulta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataConsulta");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime>("DataRetorno");

                    b.Property<string>("DescricaoInfermidade");

                    b.Property<long>("PacienteId");

                    b.Property<bool>("Retorno");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Util.MedicoConsulta", b =>
                {
                    b.Property<long>("MedicoId");

                    b.Property<long>("ConsultaId");

                    b.Property<string>("Tratamento");

                    b.HasKey("MedicoId", "ConsultaId");

                    b.HasIndex("ConsultaId");

                    b.ToTable("MedicosConsultas");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Address.Endereco", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.Person.Pessoa", "Pessoa")
                        .WithMany("Enderecos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Funcionario", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.Person.Util.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjetoUnip.Domain.Person.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Medico", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.Person.Util.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjetoUnip.Domain.Person.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Paciente", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.Person.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Person.Pessoa", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.User.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoUnip.Domain.User.Usuario", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.User.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Util.Consulta", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.Person.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoUnip.Domain.Util.MedicoConsulta", b =>
                {
                    b.HasOne("ProjetoUnip.Domain.Util.Consulta", "Consulta")
                        .WithMany("MedicosConsultas")
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjetoUnip.Domain.Person.Medico", "Medico")
                        .WithMany("MedicosConsultas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
